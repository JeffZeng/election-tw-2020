// Generated by LiveScript 1.3.1
(function(){
  var inst;
  inst = function(opt){
    opt == null && (opt = {});
    this.root = typeof opt.root === typeof ''
      ? document.querySelector(opt.root)
      : opt.root;
    this.lc = {};
    this.type = opt.type;
    this.popup = opt.popup;
    return this;
  };
  inst.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var ref$, root, type, popup, this$ = this;
      ref$ = {
        root: this.root,
        type: this.type,
        popup: this.popup
      }, root = ref$.root, type = ref$.type, popup = ref$.popup;
      root.addEventListener('mousemove', function(e){
        var n, data;
        if (!(n = e.target)) {
          return;
        }
        if (n.nodeType !== 1) {
          return;
        }
        if (!(data = d3.select(n).datum())) {
          return;
        }
        if (popup != null) {
          return popup({
            evt: e,
            data: data
          });
        }
      });
      return ld$.fetch("assets/lib/pdmap.tw/" + type + ".topo.json", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(topo){
        this$.lc.topo = topo;
        return ld$.fetch("assets/lib/pdmap.tw/" + type + ".meta.json", {
          method: 'GET'
        }, {
          type: 'json'
        });
      }).then(function(meta){
        var features, path;
        this$.lc.meta = meta;
        this$.lc.features = features = topojson.feature(this$.lc.topo, this$.lc.topo.objects["pdmaptw"]).features;
        features.map(function(it){
          var name;
          name = [meta.name[it.properties.c], meta.name[it.properties.t], meta.name[it.properties.v]].filter(function(it){
            return it;
          }).join('');
          return it.properties.name = pdmaptw.normalize(name);
        });
        this$.lc.path = path = d3.geoPath().projection(pdmaptw.projection);
        return d3.select(root).append('svg').append('g').selectAll('path').data(features).enter().append('path').attr('d', path);
      });
    },
    fit: function(){
      var root, g, svg, bcr, bbox, ref$, width, height, padding, scale, w, h;
      root = this.root;
      g = ld$.find(root, 'g', 0);
      svg = d3.select(root).select('svg');
      svg.attr('width', '100%');
      svg.attr('height', '100%');
      bcr = root.getBoundingClientRect();
      bbox = g.getBBox();
      ref$ = [bcr.width, bcr.height], width = ref$[0], height = ref$[1];
      padding = 20;
      scale = Math.min((width - 2 * padding) / bbox.width, (height - 2 * padding) / bbox.height);
      ref$ = [width / 2, height / 2], w = ref$[0], h = ref$[1];
      return g.setAttribute('transform', "translate(" + w + "," + h + ") scale(" + scale + ") translate(" + (-bbox.x - bbox.width / 2) + "," + (-bbox.y - bbox.height / 2) + ")");
    }
  });
  pdmaptw.create = function(opt){
    opt == null && (opt = {});
    return new inst(opt);
  };
  return pdmaptw.normalize = function(it){
    return it.replace(/臺/g, '台');
  };
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}