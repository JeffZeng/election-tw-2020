// Generated by LiveScript 1.3.1
(function(){
  var patch, inst, lc;
  patch = function(it){
    return it.replace(/臺/g, '台');
  };
  inst = function(opt){
    opt == null && (opt = {});
    this.root = typeof opt.root === typeof ''
      ? document.querySelector(opt.root)
      : opt.root;
    this.lc = {};
    this.type = opt.type;
    return this;
  };
  inst.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var ref$, root, type, this$ = this;
      ref$ = {
        root: this.root,
        type: this.type
      }, root = ref$.root, type = ref$.type;
      return ld$.fetch("assets/lib/pdmap.tw/" + type + ".topo.json", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(topo){
        this$.lc.topo = topo;
        return ld$.fetch("assets/lib/pdmap.tw/" + type + ".meta.json", {
          method: 'GET'
        }, {
          type: 'json'
        });
      }).then(function(meta){
        var features, path;
        this$.lc.meta = meta;
        this$.lc.features = features = topojson.feature(this$.lc.topo, this$.lc.topo.objects["pdmaptw"]).features;
        this$.lc.path = path = d3.geoPath().projection(pdmaptw.projection);
        return d3.select(root).append('svg').append('g').selectAll('path').data(features).enter().append('path').attr('d', path);
      });
    },
    fit: function(){
      var root, g, svg, bcr, bbox, ref$, width, height, padding, scale, w, h;
      root = this.root;
      g = ld$.find(root, 'g', 0);
      svg = d3.select(root).select('svg');
      svg.attr('width', '100%');
      svg.attr('height', '100%');
      bcr = root.getBoundingClientRect();
      bbox = g.getBBox();
      ref$ = [bcr.width, bcr.height], width = ref$[0], height = ref$[1];
      padding = 20;
      scale = Math.min((width - 2 * padding) / bbox.width, (height - 2 * padding) / bbox.height);
      ref$ = [width / 2, height / 2], w = ref$[0], h = ref$[1];
      return g.setAttribute('transform', "translate(" + w + "," + h + ") scale(" + scale + ") translate(" + (-bbox.x - bbox.width / 2) + "," + (-bbox.y - bbox.height / 2) + ")");
    }
  });
  pdmaptw.create = function(opt){
    opt == null && (opt = {});
    return new inst(opt);
  };
  lc = {
    map: {}
  };
  lc.map.kmt = pdmaptw.create({
    root: ld$.find(document, '#kmt', 0),
    type: 'town'
  });
  lc.map.dpp = pdmaptw.create({
    root: ld$.find(document, '#dpp', 0),
    type: 'town'
  });
  return lc.map.kmt.init().then(function(){
    return lc.map.dpp.init();
  }).then(function(){
    return ld$.fetch("assets/election.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    var i$, ref$, len$, item;
    lc.data = data;
    lc.stat = {};
    for (i$ = 0, len$ = (ref$ = lc.data).length; i$ < len$; ++i$) {
      item = ref$[i$];
      lc.stat[item.name] = item;
    }
    return ld$.fetch("assets/kmt-diff.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    lc.kmt = data;
    return ld$.fetch("assets/dpp-diff.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    return lc.dpp = data;
  }).then(function(){
    var i$, ref$, len$, name, k, ref1$, v, list, res$;
    lc.range = {};
    for (i$ = 0, len$ = (ref$ = ['kmt', 'dpp']).length; i$ < len$; ++i$) {
      name = ref$[i$];
      for (k in ref1$ = lc[name]) {
        v = ref1$[k];
        v.diff = (v.party - v.president) / v.president;
      }
      res$ = [];
      for (k in ref1$ = lc[name]) {
        v = ref1$[k];
        res$.push(v.diff);
      }
      list = res$;
      lc.range[name] = {
        min: Math.min.apply(null, list),
        max: Math.max.apply(null, list)
      };
      if (lc.range[name].max > -lc.range[name].min) {
        lc.range[name].min = -lc.range[name].max;
      }
      if (lc.range[name].min < -lc.range[name].max) {
        lc.range[name].max = -lc.range[name].min;
      }
      lc.range[name].size = lc.range[name].max - lc.range[name].min;
    }
    lc.range.max = Math.max(lc.range.kmt.max, lc.range.dpp.max);
    lc.range.min = Math.min(lc.range.kmt.min, lc.range.dpp.min);
    return lc.range.size = lc.range.max - lc.range.min;
  }).then(function(){
    var i$, ref$, len$, party, obj, view, results$ = [];
    for (i$ = 0, len$ = (ref$ = ['kmt', 'dpp']).length; i$ < len$; ++i$) {
      party = ref$[i$];
      obj = lc.map[party];
      obj.fit();
      d3.select(obj.root).selectAll('path').attr('fill', fn$).attr('stroke', fn1$).attr('stroke-width', fn2$);
      results$.push(view = new ldView({
        root: "[ld-scope=" + party + "]",
        handler: {
          label: {
            list: fn3$,
            handle: fn4$
          }
        }
      }));
    }
    return results$;
    function fn$(it){
      var name, u, v, e;
      name = patch(obj.lc.meta.name[it.properties.c] + obj.lc.meta.name[it.properties.t]);
      try {
        u = v = lc[party][name].diff;
        v = (v - lc.range.min) / lc.range.size;
        return d3.interpolateRdBu(v);
      } catch (e$) {
        e = e$;
        return 'rgba(0,0,0,.5)';
      }
    }
    function fn1$(){
      return '#000';
    }
    function fn2$(){
      return 0.00;
    }
    function fn3$(){
      return [1, 0.8, 0.6000000000000001, 0.4000000000000001, 0.20000000000000007, 5.551115123125783e-17];
    }
    function fn4$(arg$){
      var data, node, v;
      data = arg$.data, node = arg$.node;
      ld$.find(node, '.dot', 0).style.background = d3.interpolateRdBu(data);
      v = data * lc.range.size + lc.range.min;
      return ld$.find(node, '.name', 0).innerText = Math.round(v * 100) + "%";
    }
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}