// Generated by LiveScript 1.3.1
(function(){
  var patch, inst, lc;
  patch = function(it){
    return it.replace(/臺/g, '台');
  };
  inst = function(opt){
    opt == null && (opt = {});
    this.root = typeof opt.root === typeof ''
      ? document.querySelector(opt.root)
      : opt.root;
    this.lc = {};
    this.type = opt.type;
    return this;
  };
  inst.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var ref$, root, type, this$ = this;
      ref$ = {
        root: this.root,
        type: this.type
      }, root = ref$.root, type = ref$.type;
      return ld$.fetch("assets/lib/pdmap.tw/" + type + ".topo.json", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(topo){
        this$.lc.topo = topo;
        return ld$.fetch("assets/lib/pdmap.tw/" + type + ".meta.json", {
          method: 'GET'
        }, {
          type: 'json'
        });
      }).then(function(meta){
        var features, path;
        this$.lc.meta = meta;
        this$.lc.features = features = topojson.feature(this$.lc.topo, this$.lc.topo.objects["pdmaptw"]).features;
        this$.lc.path = path = d3.geoPath().projection(pdmaptw.projection);
        return d3.select(root).append('svg').append('g').selectAll('path').data(features).enter().append('path').attr('d', path);
      });
    },
    fit: function(){
      var root, g, svg, bcr, bbox, ref$, width, height, padding, scale, w, h;
      root = this.root;
      g = ld$.find(root, 'g', 0);
      svg = d3.select(root).select('svg');
      svg.attr('width', '100%');
      svg.attr('height', '100%');
      bcr = root.getBoundingClientRect();
      bbox = g.getBBox();
      ref$ = [bcr.width, bcr.height], width = ref$[0], height = ref$[1];
      padding = 20;
      scale = Math.min((width - 2 * padding) / bbox.width, (height - 2 * padding) / bbox.height);
      ref$ = [width / 2, height / 2], w = ref$[0], h = ref$[1];
      return g.setAttribute('transform', "translate(" + w + "," + h + ") scale(" + scale + ") translate(" + (-bbox.x - bbox.width / 2) + "," + (-bbox.y - bbox.height / 2) + ")");
    }
  });
  pdmaptw.create = function(opt){
    opt == null && (opt = {});
    return new inst(opt);
  };
  lc = {};
  lc.obj1 = pdmaptw.create({
    root: ld$.find(document, '#map1', 0),
    type: 'town'
  });
  lc.obj2 = pdmaptw.create({
    root: ld$.find(document, '#map2', 0),
    type: 'town'
  });
  return lc.obj1.init().then(function(){
    return lc.obj2.init();
  }).then(function(){
    return ld$.fetch("assets/election.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    var list, invalidList, i$, len$, item;
    lc.data = data;
    lc.hash = {};
    list = lc.data.map(function(it){
      return it.vote / it.total;
    });
    lc.min = Math.min.apply(null, list);
    lc.max = Math.max.apply(null, list);
    invalidList = lc.data.map(function(it){
      return (it.vote - it.valid) / it.vote;
    });
    lc.invalid = {
      min: Math.min.apply(null, invalidList),
      max: Math.max.apply(null, invalidList)
    };
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      item = data[i$];
      lc.hash[item.name] = item;
    }
    return console.log(lc.invalid);
  }).then(function(){
    var obj, data, ref$, max, view;
    obj = lc.obj1;
    obj.fit();
    data = (ref$ = lc.data)[ref$.length - 1];
    max = Math.max.apply(null, obj.lc.meta.name.map(function(it){
      return data[it] || 0;
    }));
    d3.select(obj.root).selectAll('path').attr('fill', function(it){
      var name, v;
      name = patch(obj.lc.meta.name[it.properties.c] + obj.lc.meta.name[it.properties.t]);
      v = lc.hash[name].vote / lc.hash[name].total;
      v = (v - lc.min) / (lc.max - lc.min);
      return d3.interpolateRdBu(v);
    }).attr('stroke', function(){
      return '#000';
    }).attr('stroke-width', function(){
      return 0.00;
    });
    return view = new ldView({
      root: '[ld-scope=vote]',
      handler: {
        label: {
          list: function(){
            return [1, 0.8, 0.6000000000000001, 0.4000000000000001, 0.20000000000000007, 5.551115123125783e-17];
          },
          handle: function(arg$){
            var data, node, v;
            data = arg$.data, node = arg$.node;
            ld$.find(node, '.dot', 0).style.background = d3.interpolateRdBu(data);
            v = data * (lc.max - lc.min) + lc.min;
            return ld$.find(node, '.name', 0).innerText = Math.round(v * 100) + "%";
          }
        }
      }
    });
  }).then(function(){
    var obj, data, ref$, view;
    obj = lc.obj2;
    obj.fit();
    data = (ref$ = lc.data)[ref$.length - 1];
    d3.select(obj.root).selectAll('path').attr('fill', function(it){
      var name, v;
      name = patch(obj.lc.meta.name[it.properties.c] + obj.lc.meta.name[it.properties.t]);
      v = (lc.hash[name].vote - lc.hash[name].valid) / lc.hash[name].vote;
      v = 1 - (v - lc.invalid.min) / (lc.invalid.max - lc.invalid.min);
      return d3.interpolatePiYG(v);
    }).attr('stroke', function(){
      return '#000';
    }).attr('stroke-width', function(){
      return 0.00;
    });
    return view = new ldView({
      root: '[ld-scope=invalid]',
      handler: {
        label: {
          list: function(){
            return [1, 0.8, 0.6000000000000001, 0.4000000000000001, 0.20000000000000007, 5.551115123125783e-17];
          },
          handle: function(arg$){
            var data, node, v;
            data = arg$.data, node = arg$.node;
            ld$.find(node, '.dot', 0).style.background = d3.interpolatePiYG(1 - data);
            v = data * (lc.invalid.max - lc.invalid.min) + lc.invalid.min;
            return ld$.find(node, '.name', 0).innerText = Math.round(v * 1000) / 10 + "%";
          }
        }
      }
    });
  });
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}