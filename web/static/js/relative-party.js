// Generated by LiveScript 1.3.1
(function(){
  var patch, color, render, popup1, popup2, lc;
  patch = function(it){
    return it.replace(/臺/g, '台');
  };
  color = {
    "合一行動聯盟": null,
    "中華統一促進黨": null,
    "親民黨": '#f90',
    "安定力量": null,
    "台灣基進": '#984a34',
    "時代力量": '#ff0',
    "新黨": null,
    "喜樂島聯盟": null,
    "中國國民黨": '#00f',
    "一邊一國行動黨": '#5bafb7',
    "勞動黨": null,
    "綠黨": '#7ac7a0',
    "宗教聯盟": null,
    "民主進步黨": '#0f0',
    "台灣民眾黨": '#0ff',
    "台灣維新": null,
    "台澎黨": null,
    "國會政黨聯盟": null,
    "台灣團結聯盟": '#c6a260'
  };
  render = function(type){
    var obj;
    obj = lc.map[type];
    obj.fit();
    return d3.select(obj.root).selectAll('path').attr('fill', function(it){
      var party, c;
      party = lc.data[it.properties.name][type][0];
      c = color[party] || '#ccc';
      if (lc.highlight && party !== lc.highlight) {
        c = '#ccc';
      }
      return c;
    }).attr('stroke', function(){
      return '#000';
    }).attr('stroke-width', function(){
      return 0.00;
    });
  };
  popup1 = popupWrap(function(arg$){
    var data, evt, node;
    data = arg$.data, evt = arg$.evt, node = arg$.node;
    return node.innerHTML += "<div>" + lc.data[data.properties.name].win[0] + "</div>";
  });
  popup2 = popupWrap(function(arg$){
    var data, evt, node;
    data = arg$.data, evt = arg$.evt, node = arg$.node;
    return node.innerHTML += "<div>" + lc.data[data.properties.name].lose[0] + "</div>";
  });
  lc = {
    map: {}
  };
  lc.map.win = pdmaptw.create({
    root: ld$.find(document, '#map-relative-party-positive', 0),
    type: 'town',
    popup: popup1
  });
  lc.map.lose = pdmaptw.create({
    root: ld$.find(document, '#map-relative-party-negative', 0),
    type: 'town',
    popup: popup2
  });
  return lc.map.win.init().then(function(){
    return lc.map.lose.init();
  }).then(function(){
    return ld$.fetch("assets/data/政黨票相對全國落差.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    return lc.data = data;
  }).then(function(){
    var i$, ref$, len$, type, view, root;
    for (i$ = 0, len$ = (ref$ = ['win', 'lose']).length; i$ < len$; ++i$) {
      type = ref$[i$];
      render(type);
      view = new ldView({
        root: "[ld-scope=relative-party-" + (type === 'win' ? 'positive' : 'negative') + "]",
        handler: {
          label: {
            list: fn$,
            handle: fn1$
          }
        }
      });
    }
    root = ld$.find(document, '#map-relative-party', 0);
    return root.addEventListener('mousemove', function(e){
      var n, name;
      console.log(ld$.parent(e.target, '.label', root));
      if (!(n = ld$.parent(e.target, '.label', root))) {
        if (lc.highlight) {
          lc.highlight = null;
          render('win');
          render('lose');
        }
        return;
      }
      name = n.getAttribute('data-name');
      lc.highlight = name;
      render('win');
      return render('lose');
    });
    function fn$(){
      var k, v;
      return (function(){
        var ref$, results$ = [];
        for (k in ref$ = color) {
          v = ref$[k];
          results$.push([k, v]);
        }
        return results$;
      }()).filter(function(it){
        return it[1];
      }).map(function(it){
        return it[0];
      });
    }
    function fn1$(arg$){
      var data, node;
      data = arg$.data, node = arg$.node;
      ld$.find(node, '.dot', 0).style.background = color[data] || '#ccc';
      ld$.find(node, '.name', 0).innerText = data;
      node.setAttribute('data-name', data);
      return node.classList.add('clickable');
    }
  });
})();