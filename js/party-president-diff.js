// Generated by LiveScript 1.3.1
(function(){
  var lc, popup1, popup2;
  lc = {
    map: {}
  };
  popup1 = popupWrap(function(arg$){
    var data, evt, node;
    data = arg$.data, evt = arg$.evt, node = arg$.node;
    return node.innerHTML += "<div>" + Math.round(1000 * lc.rate[data.properties.name].kmt) / 10 + "%</div>";
  });
  popup2 = popupWrap(function(arg$){
    var data, evt, node;
    data = arg$.data, evt = arg$.evt, node = arg$.node;
    return node.innerHTML += "<div>" + Math.round(1000 * lc.rate[data.properties.name].dpp) / 10 + "%</div>";
  });
  lc.map.kmt = pdmaptw.create({
    root: ld$.find(document, '#map-diff-kmt', 0),
    type: 'town',
    popup: popup1
  });
  lc.map.dpp = pdmaptw.create({
    root: ld$.find(document, '#map-diff-dpp', 0),
    type: 'town',
    popup: popup2
  });
  return lc.map.kmt.init().then(function(){
    return lc.map.dpp.init();
  }).then(function(){
    return ld$.fetch("assets/data/政黨總統票差距.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    lc.data = data;
    return ld$.fetch("assets/data/總統票.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(data){
    var president, town, ref$, obj, i$, len$, p, list, res$, k, ref1$, v;
    lc.president = president = data;
    lc.rate = {};
    lc.range = {};
    for (town in ref$ = lc.data) {
      obj = ref$[town];
      lc.rate[town] = {
        pfp: obj.pfp / president[town][1],
        kmt: obj.kmt / president[town][2],
        dpp: obj.dpp / president[town][3]
      };
    }
    for (i$ = 0, len$ = (ref$ = ['kmt', 'dpp', 'pfp']).length; i$ < len$; ++i$) {
      p = ref$[i$];
      res$ = [];
      for (k in ref1$ = lc.rate) {
        v = ref1$[k];
        res$.push(v[p]);
      }
      list = res$;
      lc.range[p] = {
        min: Math.min.apply(null, list),
        max: Math.max.apply(null, list)
      };
      lc.range[p].size = lc.range[p].max - lc.range[p].min;
    }
    lc.range.max = Math.max(lc.range.kmt.max, lc.range.dpp.max);
    lc.range.min = Math.min(lc.range.kmt.min, lc.range.dpp.min);
    return lc.range.size = lc.range.max - lc.range.min;
  }).then(function(){
    var i$, ref$, len$, party, obj, view, results$ = [];
    for (i$ = 0, len$ = (ref$ = ['kmt', 'dpp']).length; i$ < len$; ++i$) {
      party = ref$[i$];
      obj = lc.map[party];
      obj.fit();
      d3.select(obj.root).selectAll('path').attr('fill', fn$).attr('stroke', fn1$).attr('stroke-width', fn2$);
      results$.push(view = new ldView({
        root: "[ld-scope=diff-" + party + "]",
        handler: {
          label: {
            list: fn3$,
            handle: fn4$
          }
        }
      }));
    }
    return results$;
    function fn$(it){
      var v;
      v = lc.rate[it.properties.name][party];
      v = v > 0
        ? 0.5 + 0.5 * v / lc.range.max
        : 0.5 * (v - lc.range.min) / -lc.range.min;
      v = 0.1 + v * 0.8;
      return d3.interpolateRdBu(v);
    }
    function fn1$(){
      return '#fff';
    }
    function fn2$(){
      return 0.001;
    }
    function fn3$(){
      var b, res$, i$, step$, to$, ridx$;
      res$ = [];
      for (i$ = 0, to$ = lc.range.min, step$ = lc.range.min / 3; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
        ridx$ = i$;
        res$.push(ridx$);
      }
      b = res$;
      return [lc.range.max].concat(b);
    }
    function fn4$(arg$){
      var data, node, v;
      data = arg$.data, node = arg$.node;
      v = data;
      v = v > 0
        ? 0.5 + 0.5 * v / lc.range.max
        : 0.5 * (v - lc.range.min) / -lc.range.min;
      v = 0.1 + v * 0.8;
      ld$.find(node, '.dot', 0).style.background = d3.interpolateRdBu(v);
      return ld$.find(node, '.name', 0).innerText = Math.round(data * 1000) / 10 + "%";
    }
  });
})();